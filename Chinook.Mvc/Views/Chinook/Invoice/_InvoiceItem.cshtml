@model InvoiceItemModel

@{
    string CSHTML = "_InvoiceItem.cshtml";
    string customerText = Model.Invoice == null ? "" : (Model.Invoice.CustomerLookupText ?? "");
}

<div id="Item_Invoice">
    @Html.ValidationSummary(false, "", new { @class = "text-danger" })

    @Html.HiddenFor(model => model.ControllerAction, new { id = "Invoice_Item_ControllerAction" })
    @Html.ZHiddenFor(model => model.IsReadOnly, "Invoice_Item_IsReadOnly")
    @Html.ZHiddenFor(model => model.IsSave, "Invoice_Item_IsSave")
    @Html.HiddenFor(model => model.MasterCustomerId, new { id = "Invoice_Item_MasterCustomerId" })

    @{Html.EJ().Tab("Tab_Invoice")
        .ClientSideEvents(clientEvent => clientEvent
            .ItemActive("itemActive_Tab_Invoice")
        )
        //.EnablePersistence()
        .Items(data =>
        {
            data.Add().ID("TabSheet_Invoice_Invoice").Text(InvoiceResources.EntitySingular).ContentTemplate(@<div class="@AppDefaults.CssClassPanel">
                
                <div id="Group_Invoice_InvoiceId" class="@AppDefaults.CssClassGroup @Invoice.DataProfile.EditWidthCSSFor("InvoiceId")">
                    @Html.LabelFor(model => model.Invoice.InvoiceId, new { @class = AppDefaults.CssClassLabelRequired })
                    @Html.EditorFor(model => model.Invoice.InvoiceId, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "Invoice_InvoiceId" } })
                    @* @Html.ValidationMessageFor(model => model.Invoice.InvoiceId, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>
                
                <div id="Group_Invoice_CustomerId" class="@AppDefaults.CssClassGroup @Invoice.DataProfile.EditWidthCSSFor("CustomerLookupText")">
                    @Html.LabelFor(model => model.Invoice.CustomerId, new { @class = AppDefaults.CssClassLabelRequired })
                    @Html.EditorFor(model => model.Invoice.CustomerId, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "Invoice_CustomerId" } })
                    @{
                        Html.RenderAction("Lookup", "Customer", new
                        {
                            Text = customerText,
                            ValueId = "Invoice_CustomerId"
                        });
                    }
                    @* @Html.ValidationMessageFor(model => model.Invoice.CustomerId, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>
                
                <div id="Group_Invoice_InvoiceDate" class="@AppDefaults.CssClassGroup @Invoice.DataProfile.EditWidthCSSFor("InvoiceDate")">
                    @Html.LabelFor(model => model.Invoice.InvoiceDate, new { @class = AppDefaults.CssClassLabelRequired })
                    @* @Html.EditorFor(model => model.Invoice.InvoiceDate, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "Invoice_InvoiceDate" } }) *@
                    @Html.EJ().DateTimePickerFor(model => model.Invoice.InvoiceDate, AppHelper.DateTimeModel, new { id = "Invoice_InvoiceDate" })
                    @* @Html.ValidationMessageFor(model => model.Invoice.InvoiceDate, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>
                
                <div id="Group_Invoice_BillingAddress" class="@AppDefaults.CssClassGroup @Invoice.DataProfile.EditWidthCSSFor("BillingAddress")">
                    @Html.LabelFor(model => model.Invoice.BillingAddress, new { @class = AppDefaults.CssClassLabel })
                    @Html.EditorFor(model => model.Invoice.BillingAddress, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "Invoice_BillingAddress" } })
                    @* @Html.ValidationMessageFor(model => model.Invoice.BillingAddress, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>
                
                <div id="Group_Invoice_BillingCity" class="@AppDefaults.CssClassGroup @Invoice.DataProfile.EditWidthCSSFor("BillingCity")">
                    @Html.LabelFor(model => model.Invoice.BillingCity, new { @class = AppDefaults.CssClassLabel })
                    @Html.EditorFor(model => model.Invoice.BillingCity, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "Invoice_BillingCity" } })
                    @* @Html.ValidationMessageFor(model => model.Invoice.BillingCity, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>
                
                <div id="Group_Invoice_BillingState" class="@AppDefaults.CssClassGroup @Invoice.DataProfile.EditWidthCSSFor("BillingState")">
                    @Html.LabelFor(model => model.Invoice.BillingState, new { @class = AppDefaults.CssClassLabel })
                    @Html.EditorFor(model => model.Invoice.BillingState, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "Invoice_BillingState" } })
                    @* @Html.ValidationMessageFor(model => model.Invoice.BillingState, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>
                
                <div id="Group_Invoice_BillingCountry" class="@AppDefaults.CssClassGroup @Invoice.DataProfile.EditWidthCSSFor("BillingCountry")">
                    @Html.LabelFor(model => model.Invoice.BillingCountry, new { @class = AppDefaults.CssClassLabel })
                    @Html.EditorFor(model => model.Invoice.BillingCountry, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "Invoice_BillingCountry" } })
                    @* @Html.ValidationMessageFor(model => model.Invoice.BillingCountry, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>
                
                <div id="Group_Invoice_BillingPostalCode" class="@AppDefaults.CssClassGroup @Invoice.DataProfile.EditWidthCSSFor("BillingPostalCode")">
                    @Html.LabelFor(model => model.Invoice.BillingPostalCode, new { @class = AppDefaults.CssClassLabel })
                    @Html.EditorFor(model => model.Invoice.BillingPostalCode, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "Invoice_BillingPostalCode" } })
                    @* @Html.ValidationMessageFor(model => model.Invoice.BillingPostalCode, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>
                
                <div id="Group_Invoice_Total" class="@AppDefaults.CssClassGroup @Invoice.DataProfile.EditWidthCSSFor("Total")">
                    @Html.LabelFor(model => model.Invoice.Total, new { @class = AppDefaults.CssClassLabelRequired })
                    @Html.EditorFor(model => model.Invoice.Total, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "Invoice_Total" } })
                    @* @Html.ValidationMessageFor(model => model.Invoice.Total, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>

            </div>);
            data.Add().ID("TabSheet_Invoice_InvoiceLines").Text(InvoiceLineResources.EntityPlural).ContentTemplate(@<div class="@AppDefaults.CssClassPanel">    
                <div id="Ajax_Invoice_InvoiceLines"></div>
            </div>);
        })
        .Render();
    }
</div>

<script>
    // Validate hidden fields
    $.validator.setDefaults({ ignore: null });
    // Parse validators
    $.validator.unobtrusive.parse($("#ZAjax"));

    $(function () {
        try {
            ej.widget.init($("#Item_Invoice"));

            var model = @Html.Raw(JsonConvert.SerializeObject(Model));
            var dataProfile = @Html.Raw(JsonConvert.SerializeObject(Invoice.DataProfile));
            var controllerAction = model.ControllerAction == null ? "" : model.ControllerAction.toLowerCase();

            var ajaxUrl = "";
            if (controllerAction != "create" && zContains(dataProfile.EditCollections, "InvoiceLines")) {
                // InvoiceLines
                zUrlDictionaryWrite("InvoiceLine", "@Context.Request.Url.AbsoluteUri");
                ajaxUrl = "@(Html.Raw(Url.Action("Search", "InvoiceLine", new { MasterControllerAction = Model.ControllerAction, MasterInvoiceId = Model.Invoice.InvoiceId })))";
                zAjaxLoadSync("Ajax_Invoice_InvoiceLines", ajaxUrl);
            }

            if (controllerAction != "create" || dataProfile.Class.IsIdentity) {
                $("#Group_Invoice_InvoiceId").hide();
            }

            // Associations (FK)
            // Customer
            if (model.MasterCustomerId != null) {
                $("#Invoice_CustomerId").val(model.MasterCustomerId);
                $("#Group_Invoice_CustomerId").hide();            
            }

            zOnItemView(model, dataProfile);        
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "function", exception));
        }
    });    

    function itemActive_Tab_Invoice(args) {
        zTabDictionaryWrite("Invoice", args.model.selectedItemIndex);

        try {
            switch(args.model.selectedItemIndex) {
                case 1:
                    zGridDataSource("Grid_InvoiceLine", "@Url.Action("DataSource", "InvoiceLine")");
                    break;
            }
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "itemActive_Tab_Invoice", exception));
        }
    }
</script>
