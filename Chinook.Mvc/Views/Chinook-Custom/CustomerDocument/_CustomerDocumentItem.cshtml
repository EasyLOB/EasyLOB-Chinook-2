@model CustomerDocumentItemModel

@{
    string CSHTML = "_CustomerDocumentItem.cshtml";
    string customerText = Model.CustomerDocument == null ? "" : (Model.CustomerDocument.CustomerLookupText ?? "");
}

<div id="Item_CustomerDocument">
    @Html.ValidationSummary(false, "", new { @class = "text-danger" })

    @Html.HiddenFor(model => model.ControllerAction, new { id = "CustomerDocument_Item_ControllerAction" })
    @Html.ZHiddenFor(model => model.IsReadOnly, "CustomerDocument_Item_IsReadOnly")
    @Html.ZHiddenFor(model => model.IsSave, "CustomerDocument_Item_IsSave")
    @Html.HiddenFor(model => model.MasterCustomerId, new { id = "CustomerDocument_Item_MasterCustomerId" })

    @{Html.EJ().Tab("Tab_CustomerDocument")
        .ClientSideEvents(clientEvent => clientEvent
            .ItemActive("itemActive_Tab_CustomerDocument")
        )
        //.EnablePersistence()
        .Items(data =>
        {
            data.Add().ID("TabSheet_CustomerDocument_CustomerDocument").Text(CustomerDocumentResources.EntitySingular).ContentTemplate(@<div class="@AppDefaults.CssClassPanel">
                
                <div id="Group_CustomerDocument_CustomerDocumentId" class="@AppDefaults.CssClassGroup @CustomerDocument.DataProfile.EditWidthCSSFor("CustomerDocumentId")">
                    @Html.LabelFor(model => model.CustomerDocument.CustomerDocumentId, new { @class = AppDefaults.CssClassLabelRequired })
                    @Html.EditorFor(model => model.CustomerDocument.CustomerDocumentId, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "CustomerDocument_CustomerDocumentId" } })
                    @* @Html.ValidationMessageFor(model => model.CustomerDocument.CustomerDocumentId, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>
                
                <div id="Group_CustomerDocument_CustomerId" class="@AppDefaults.CssClassGroup @CustomerDocument.DataProfile.EditWidthCSSFor("CustomerLookupText")">
                    @Html.LabelFor(model => model.CustomerDocument.CustomerId, new { @class = AppDefaults.CssClassLabelRequired })
                    @Html.EditorFor(model => model.CustomerDocument.CustomerId, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "CustomerDocument_CustomerId" } })
                    @{
                        Html.RenderAction("Lookup", "Customer", new
                        {
                            Text = customerText,
                            ValueId = "CustomerDocument_CustomerId"
                        });
                    }
                    @* @Html.ValidationMessageFor(model => model.CustomerDocument.CustomerId, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>
                
                <div id="Group_CustomerDocument_Description" class="@AppDefaults.CssClassGroup @CustomerDocument.DataProfile.EditWidthCSSFor("Description")">
                    @Html.LabelFor(model => model.CustomerDocument.Description, new { @class = AppDefaults.CssClassLabelRequired })
                    @Html.EditorFor(model => model.CustomerDocument.Description, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "CustomerDocument_Description" } })
                    @* @Html.ValidationMessageFor(model => model.CustomerDocument.Description, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>
                
                <div id="Group_CustomerDocument_FileName" class="@AppDefaults.CssClassGroup @CustomerDocument.DataProfile.EditWidthCSSFor("FileName")">
                    @Html.LabelFor(model => model.CustomerDocument.FileName, new { @class = AppDefaults.CssClassLabelRequired })
                    @Html.EditorFor(model => model.CustomerDocument.FileName, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "CustomerDocument_FileName" } })
                    @* @Html.ValidationMessageFor(model => model.CustomerDocument.FileName, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>
                
                <div id="Group_CustomerDocument_FileAcronym" class="@AppDefaults.CssClassGroup @CustomerDocument.DataProfile.EditWidthCSSFor("FileAcronym")">
                    @Html.LabelFor(model => model.CustomerDocument.FileAcronym, new { @class = AppDefaults.CssClassLabelRequired })
                    @Html.EditorFor(model => model.CustomerDocument.FileAcronym, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "CustomerDocument_FileAcronym" } })
                    @* @Html.ValidationMessageFor(model => model.CustomerDocument.FileAcronym, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>

                @* !!! EDM *@

                <div id="Group_UploadBox_CustomerDocument" class="@AppDefaults.CssClassGroup col-md-12">
                    @Html.Label(PresentationResources.Upload123)
                    @(Html.EJ().Uploadbox("UploadBox_CustomerDocument")
                        .ClientSideEvents(clientEvent => clientEvent
                            .Complete("complete_UploadBox_CustomerDocument")
                            .Create("create_UploadBox_CustomerDocument")
                        )
                        .RemoveUrl(Url.Content("~/CustomerDocument/DeleteFile"))
                        .SaveUrl(Url.Content("~/CustomerDocument/WriteFile"))
                    )
                </div>

            </div>);
        })
        .Render();
    }
</div>

<script>
    // Validate hidden fields
    $.validator.setDefaults({ ignore: null });
    // Parse validators
    $.validator.unobtrusive.parse($("#ZAjax"));

    $(function () {
        try {
            ej.widget.init($("#Item_CustomerDocument"));

            var model = @Html.Raw(JsonConvert.SerializeObject(Model));
            var dataProfile = @Html.Raw(JsonConvert.SerializeObject(CustomerDocument.DataProfile));
            var controllerAction = model.ControllerAction == null ? "" : model.ControllerAction.toLowerCase();

            var ajaxUrl = "";

            if (controllerAction != "create" || dataProfile.Class.IsIdentity) {
                $("#Group_CustomerDocument_CustomerDocumentId").hide();
            }

            // Associations (FK)
            // Customer
            if (model.MasterCustomerId != null) {
                $("#CustomerDocument_CustomerId").val(model.MasterCustomerId);
                $("#Group_CustomerDocument_CustomerId").hide();
            }

            // !!! EDM
            if (controllerAction == "create") {
                $("#Group_UploadBox_CustomerDocument").show();
            } else {
                $("#Group_UploadBox_CustomerDocument").hide();
            }

            zOnItemView(model, dataProfile);
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "function", exception));
        }
    });

    function itemActive_Tab_CustomerDocument(args) {
        zTabDictionaryWrite("CustomerDocument", args.model.selectedItemIndex);

        try {
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "itemActive_Tab_CustomerDocument", exception));
        }
    }

    function create_UploadBox_CustomerDocument(args) { // !!! EDM
        try {
            ejUploadBoxCustomerDocument = $("#UploadBox_CustomerDocument").data("ejUploadbox");
            ejUploadBoxCustomerDocument.setModel({
                locale: "@System.Globalization.CultureInfo.CurrentCulture.Name"
            });
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "create_UploadBox_CustomerDocument", exception));
        }
    }

    function complete_UploadBox_CustomerDocument(args) { // !!! EDM
        try {
            $("#CustomerDocument_FileName").val(args.files.name);
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "complete_UploadBox_CustomerDocument", exception));
        }
    }
</script>
